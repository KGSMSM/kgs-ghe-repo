{
    "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "VPC that has two public subnets and two private subnets in different AZs, NATs to enable instances in private subnets to access the internet and forwarder/bastion hosts to moderate SSH access for Git and MSM authorised access. Installs the GHE pri and replica appliances. To Do: Add Autoscaling.",
  "Parameters" : {
    "KeyName" : {
      "Default" : "ghe-acces",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "ForwarderInstanceType" : {
      "Description" : "Forwarder instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small", "m1.small","m1.medium","m1.large"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
  },
    "NATInstanceType" : {
      "Description" : "NAT instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small", "m1.small","m1.medium","m1.large"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
  },
    "SSHInstanceType" : {
      "Description" : "SSH access instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro","t2.small", "m1.small","m1.medium","m1.large"],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
  },
    "GitHubInstanceType" : {
      "Description" : "GitHub instance type",
      "Type" : "String",
      "Default" : "r3.2xlarge",
      "AllowedValues" : [
        "t2.micro","m3.xlarge","m3.2xlarge","c3.2xlarge","c3.4xlarge",
        "c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge"
        ],
      "ConstraintDescription" : "must be a valid and allowed EC2 instance type."
    },
    "Data" : {
      "Description" : "Size of attached EBS volumes (in GB)",
      "Type" : "Number",
      "Default" : 500
    }
  },
  "Conditions" : {
    "IsEBSOptimized" : { "Fn::Equals" : [ { "Fn::FindInMap" : [ "AWSInstanceTypeEBS", { "Ref" : "GitHubInstanceType" }, "EbsOptimized" ]}, "true" ] },
    "HasKeyName" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KeyName" }, ""] }] }
  },
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "AMI" },
      "t2.small"    : { "Arch" : "AMI" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" }
    },
    "AWSInstanceTypeEBS" : {
      "t2.micro"    : { "EbsOptimized" : "false" },
      "t2.small"    : { "EbsOptimized" : "false" },
      "r3.large"    : { "EbsOptimized" : "false" },
      "r3.xlarge"   : { "EbsOptimized" : "true" },
      "r3.2xlarge"  : { "EbsOptimized" : "true" },
      "r3.4xlarge"  : { "EbsOptimized" : "true" },
      "r3.8xlarge"  : { "EbsOptimized" : "false" },
      "m3.xlarge"   : { "EbsOptimized" : "true" },
      "m3.2xlarge"  : { "EbsOptimized" : "true" },
      "c3.2xlarge"  : { "EbsOptimized" : "true" },
      "c3.4xlarge"  : { "EbsOptimized" : "true" },
      "c3.8xlarge"  : { "EbsOptimized" : "false" }
    },
    "AWSNATAMI" : {
       "eu-west-1"    : { "AMI" : "ami-e4590793" },
       "eu-central-1" : { "AMI" : "ami-accff2b1" }
    },
    "AWSSSHAMI" : {
       "eu-west-1"    : { "AMI" : "ami-e4590793" },
       "eu-central-1" : { "AMI" : "ami-accff2b1" }
    },
    "AWSFORWARDER1AMI" : {
       "eu-west-1"    : { "AMI" : "ami-82e4b9f5" },
       "eu-central-1" : { "AMI" : "ami-accff2b1" }
    },
    "AWSFORWARDER2AMI" : {
       "eu-west-1"    : { "AMI" : "ami-78e7ba0f" },
       "eu-central-1" : { "AMI" : "ami-accff2b1" }
    },
    "AWSGHEPRIAMI" : {
       "eu-west-1"    : { "AMI" : "ami-e62b7591" },
       "eu-central-1" : { "AMI" : "ami-5a350f47" }
    },
    "AWSGHEREPAMI" : {
       "eu-west-1"    : { "AMI" : "ami-465c0231" },
       "eu-central-1" : { "AMI" : "ami-5a350f47" }
    }
  },
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.68.0.0/24",
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.68.0.0/26",
        "AvailabilityZone" : { "Fn::Select" : ["0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.68.0.64/26",
        "AvailabilityZone" : { "Fn::Select" : ["1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PublicSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "80", "To" : "80"}
      }
    },
    "InboundHTTPSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },
    "InboundHTTPSSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "104",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "8443", "To" : "8443" }
      }
    },
    "InboundSSHPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },
    "InboundDynamicPortsPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1024", "To" : "65535"}
      }
    },
    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },
    "PublicSubnetNetworkAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
    "PublicSubnetNetworkAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet2" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
    "PrivateSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.68.0.128/26",
        "AvailabilityZone" : { "Fn::Select" : ["0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.68.0.192/26",
        "AvailabilityZone" : { "Fn::Select" : ["1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" } }]},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateRouteTable1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateRouteTable2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable1" }
      }
    },
    "PrivateSubnetRouteTableAssociation2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable2" }
      }
    },
    "PrivateRoute1" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice1" }
      }
    },
    "PrivateRoute2" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice2" }
      }
    },
    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
          {"Key" : "Network", "Value" : "Private" }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },
    "OutboundPrivateNetworkAclEntry100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },
    "InboundPrivateNetworkAclEntry200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "17",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1194", "To" : "1194"}
      }
    },
    "OutboundPrivateNetworkAclEntry200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "PrivateNetworkAcl"},
        "RuleNumber" : "200",
        "Protocol" : "17",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "1194", "To" : "1194"}
      }
    },
    "PrivateSubnetNetworkAclAssociation1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet1" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },
    "PrivateSubnetNetworkAclAssociation2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet2" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },
    "FWIPAddress1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "ForwarderHost1" }
      }
    },
    "FWIPAddress2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "ForwarderHost2" }
      }
    },
    "SSHPAddress1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "SSHHost1" }
      }
    },
    "SSHIPAddress2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "SSHHost2" }
      }
    },
    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"} ,
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "SSHSecurityGroup" } },
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "GHInstanceSecurityGroup" } },
           { "IpProtocol" : "tcp", "FromPort" : "122",  "ToPort" : "122",  "SourceSecurityGroupId" : { "Ref" : "GHInstanceSecurityGroup" } },
           { "IpProtocol" : "tcp", "FromPort" : "1",  "ToPort" : "65535",  "SourceSecurityGroupId" : { "Ref" : "InternalSshSecurityGroup" } },
           { "IpProtocol" : "udp", "FromPort" : "1194",  "ToPort" : "1194",  "SourceSecurityGroupId" : { "Ref" : "GHInstanceSecurityGroup" } }],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "1",  "ToPort" : "65535",  "CidrIp" : "0.0.0.0/0"} ]
      }
    },
    "NATDevice1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "NATSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet1" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "NAT Host 1"}, {"Key" : "NAT", "Value" : "true"} ]
      }
    },
    "NATDevice2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "NATInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "NATSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PublicSubnet2" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "NAT Host 2"}, {"Key" : "NAT", "Value" : "true"} ]
      }
    },
    "SSHHost1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "SSHInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSSSHAMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "SSHInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "SSHSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "PrivateIpAddress" : "10.68.0.61",
          "SubnetId"                 : { "Ref" : "PublicSubnet1" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "SSH Bastion Host 1"}, {"Key" : "SSH", "Value" : "true"} ]
      }
    },
    "SSHHost2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "SSHInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSSSHAMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "SSHInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "SSHSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "PrivateIpAddress" : "10.68.0.112",
          "SubnetId"                 : { "Ref" : "PublicSubnet2" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "SSH Bastion Host 2"}, {"Key" : "SSH", "Value" : "true"} ]
      }
    },
    "ForwarderHost1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "ForwarderInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSFORWARDER1AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "ForwarderInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "ForwarderSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "PrivateIpAddress" : "10.68.0.35",
          "SubnetId"                 : { "Ref" : "PublicSubnet1" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "Forwarder Host 1"}, {"Key" : "Forwarder", "Value" : "true"} ]
      }
    },
    "ForwarderHost2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "InstanceType" : { "Ref" : "ForwarderInstanceType" },
        "KeyName"  : { "Ref" : "KeyName" },
        "ImageId"  : { "Fn::FindInMap" : [ "AWSFORWARDER2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "ForwarderInstanceType" }, "Arch" ] } ] },
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "ForwarderSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "PrivateIpAddress" : "10.68.0.79",
          "SubnetId"                 : { "Ref" : "PublicSubnet2" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "Forwarder Host 2"}, {"Key" : "Forwarder", "Value" : "true"} ]
      }
    },
    "GHEHost1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "KeyName" : { "Fn::If" : [ "HasKeyName",
                                   { "Ref" : "KeyName" },
                                   { "Ref" : "AWS::NoValue" }
                                 ]},
        "ImageId" : { "Fn::FindInMap" : [ "AWSGHEPRIAMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "GitHubInstanceType" },
        "EbsOptimized": { "Fn::If" : [ "IsEBSOptimized", true, false ] },
        "BlockDeviceMappings": [{
          "DeviceName" : "/dev/xvdf",
          "Ebs": {
            "VolumeType": "gp2",
            "VolumeSize" : { "Ref" : "Data" },
            "DeleteOnTermination": false
          }
        }],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "GHInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "PrivateIpAddress" : "10.68.0.135",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PrivateSubnet1" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "GitHub Primary Host"}, {"Key" : "GitHub", "Value" : "true"} ]
      }
    },
    "GHEHost2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "KeyName" : { "Fn::If" : [ "HasKeyName",
                                   { "Ref" : "KeyName" },
                                   { "Ref" : "AWS::NoValue" }
                                 ]},
        "ImageId" : { "Fn::FindInMap" : [ "AWSGHEREPAMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "GitHubInstanceType" },
        "EbsOptimized": { "Fn::If" : [ "IsEBSOptimized", true, false ] },
        "BlockDeviceMappings": [{
          "DeviceName" : "/dev/xvdf",
          "Ebs": {
            "VolumeType": "gp2",
            "VolumeSize" : { "Ref" : "Data" },
            "DeleteOnTermination": false
          }
        }],
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "GHInstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "PrivateIpAddress" : "10.68.0.196",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PrivateSubnet2" }
        }],
        "Tags" : [ {"Key" : "Name", "Value" : "GitHub Replica Host"}, {"Key" : "GitHub", "Value" : "true"} ]
      }
    },
    "ForwarderSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the forwarder host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
        { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0"},
        { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0"},
        { "IpProtocol" : "tcp", "FromPort" : "222",  "ToPort" : "222",  "CidrIp" : "10.68.0.0/25" },
        { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0"},
        { "IpProtocol" : "tcp", "FromPort" : "8443",  "ToPort" : "8443",  "CidrIp" : "0.0.0.0/0"} ]
    }
    },
    "SSHSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the bastion ssh host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0"},
                                   { "IpProtocol" : "udp", "FromPort" : "1194",  "ToPort" : "1194",  "CidrIp" : "0.0.0.0/0"}]
    }
    },
    "GHInstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 80,
          "ToPort" : 80,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 443,
          "ToPort" : 443,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 8443,
          "ToPort" : 8443,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 25,
          "ToPort" : 25,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 465,
          "ToPort" : 465,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 587,
          "ToPort" : 587,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 1194,
          "ToPort" : 1194,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : 1194,
          "ToPort" : 1194,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 122,
          "ToPort" : 122,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : 9418,
          "ToPort" : 9418,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : 123,
          "ToPort" : 123,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "icmp",
          "FromPort" : 80,
          "ToPort" : 80,
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : 161,
          "ToPort" : 161,
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
  },
    "InternalSshSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow ssh access from bastion",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "ForwarderSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "122", "ToPort" : "122", "SourceSecurityGroupId" : { "Ref" : "GHInstanceSecurityGroup" } },
          { "IpProtocol" : "udp", "FromPort" : "1194", "ToPort" : "1194", "SourceSecurityGroupId" : { "Ref" : "GHInstanceSecurityGroup" } }
 ],
        "SecurityGroupEgress" : [ ]
      }
     }
  },
  "Outputs" : {
    "VpcId" : {
      "Description": "VPC",
      "Value": { "Ref" : "VPC" }
    },
    "PublicSubnets" : {
      "Description" : "Public subnet",
      "Value" : { "Fn::Join" : [",", [{ "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }] ] }
    },
    "PrivateSubnets" : {
      "Description" : "Private subnet",
      "Value" : { "Fn::Join" : [",", [{ "Ref" : "PrivateSubnet1" }, { "Ref" : "PrivateSubnet2" }] ] }
    },
    "AZs" : {
      "Description" : "Availability zones",
      "Value" :  { "Fn::Join" : [",", [ { "Fn::GetAtt" : ["PrivateSubnet1", "AvailabilityZone"] }, { "Fn::GetAtt" : ["PrivateSubnet2", "AvailabilityZone"] }]]}
    },
    "InternalSshSecurityGroupId" : {
      "Description" : "Internal ssh security group",
      "Value" : { "Ref" : "InternalSshSecurityGroup" }
    }
  }
}
